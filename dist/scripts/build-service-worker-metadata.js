"use strict";
const fs = require('fs');
const path = require('path');
const nodeCrypto = require('crypto');
const chokidar = require('chokidar');
const GLOBS = [
    'graphics/**/*.png',
    'graphics/**/*.json',
    'vendor/**/*',
    'dist/**/*.js',
    'audio/**/*.mp3',
    'favicon.ico',
    'index.html',
    'debug.html',
];
const FILE_NAME = path.join('dist', 'service-worker-metadata.js');
const FILES_TO_EXCLUDE_FROM_METADATA = [
    FILE_NAME,
    path.join('dist', 'scripts', 'build-service-worker-metadata.js'),
];
const WRITE_FILE_DELAY_MS = 500;
const watcher = chokidar.watch(GLOBS, {
    ignored: FILES_TO_EXCLUDE_FROM_METADATA,
});
const files = new Set();
let timeout = null;
function clearWriteFileTimeout() {
    if (timeout !== null) {
        clearTimeout(timeout);
        timeout = null;
    }
}
function writeFile() {
    clearWriteFileTimeout();
    const hasher = nodeCrypto.createHash('sha256');
    const fileList = Array.from(files).sort();
    let totalBytes = 0;
    for (let filename of fileList) {
        const buf = fs.readFileSync(filename);
        hasher.update(buf);
        totalBytes += fs.statSync(filename).size;
    }
    const hash = hasher.digest('hex');
    const posixFileList = fileList.map(filename => {
        return filename.split(path.sep).join('/');
    });
    const js = [
        `// This file was auto-generated by ${path.basename(__filename)}.`,
        `// Please do not modify it.`,
        ``,
        `const FILE_CONTENT_HASH = "${hash}";`,
        ``,
        `const FILE_LIST = ${JSON.stringify(posixFileList, null, 2)};`
    ].join('\n');
    fs.writeFileSync(FILE_NAME, js);
    console.log(`Wrote ${FILE_NAME} (${fileList.length} files / ${totalBytes} bytes / hash ${hash.slice(0, 10)}).`);
}
function scheduleWriteFile() {
    clearWriteFileTimeout();
    timeout = setTimeout(writeFile, WRITE_FILE_DELAY_MS);
}
watcher.on('add', path => {
    files.add(path);
    scheduleWriteFile();
});
watcher.on('change', path => {
    scheduleWriteFile();
});
watcher.on('unlink', path => {
    files.delete(path);
    scheduleWriteFile();
});
watcher.on('ready', () => {
    writeFile();
    const shouldWatch = process.argv.some(arg => arg === '--watch' || arg === '-w');
    if (shouldWatch) {
        console.log('Watching files for changes.');
    }
    else {
        watcher.close();
    }
});
