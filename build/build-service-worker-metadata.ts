import fs from 'fs';
import path from 'path';
import nodeCrypto from 'crypto';
import chokidar from 'chokidar';
import * as metadata from './metadata';

const TEMPLATE_FILE_NAME = path.join('workers', 'service-worker.template.js');

const FILE_NAME = metadata.SERVICE_WORKER_FILENAME;

const GLOBS = [
  ...metadata.OFFLINE_GLOBS,
  TEMPLATE_FILE_NAME,
];

const WRITE_FILE_DELAY_MS = 500;

const watcher = chokidar.watch(GLOBS, {ignored: metadata.OFFLINE_IGNORE_GLOBS});

const files = new Set<string>();

let timeout: NodeJS.Timeout|null = null;

function clearWriteFileTimeout() {
  if (timeout !== null) {
    clearTimeout(timeout);
    timeout = null;
  }
}

function writeFile() {
  clearWriteFileTimeout();
  const hasher = nodeCrypto.createHash('sha256');
  const fileList = Array.from(files).filter(f => f !== TEMPLATE_FILE_NAME).sort();
  let totalBytes = 0;
  for (let filename of fileList) {
    const buf = fs.readFileSync(filename);
    hasher.update(buf);
    totalBytes += fs.statSync(filename).size;
  }
  const hash = hasher.digest('hex');
  const posixFileList = fileList.map(filename => {
    return filename.split(path.sep).join('/');
  });
  const js = [
    `// This file was auto-generated by ${path.basename(__filename)}.`,
    `// Please do not modify it.`,
    ``,
    `const FILE_CONTENT_HASH = "${hash}";`,
    ``,
    `const FILE_LIST = ${JSON.stringify(posixFileList, null, 2)};`
  ].join('\n');
  const template = fs.readFileSync(TEMPLATE_FILE_NAME, {encoding: 'utf-8'});
  fs.writeFileSync(FILE_NAME, [js, template].join('\n\n'));
  console.log(`Wrote ${FILE_NAME} (${fileList.length} files / ${totalBytes} bytes / hash ${hash.slice(0, 10)}).`);
}

function scheduleWriteFile() {
  clearWriteFileTimeout();
  timeout = setTimeout(writeFile, WRITE_FILE_DELAY_MS);
}

watcher.on('add', path => {
  files.add(path);
  scheduleWriteFile();
});

watcher.on('change', path => {
  scheduleWriteFile();
});

watcher.on('unlink', path => {
  files.delete(path);
  scheduleWriteFile();
});

watcher.on('ready', () => {
  writeFile();
  const shouldWatch = process.argv.some(arg => arg === '--watch' || arg === '-w');
  if (shouldWatch) {
    console.log('Watching files for changes.');
  } else {
    watcher.close();
  }
});
